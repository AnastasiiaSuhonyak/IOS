import SwiftUI

struct ContentView: View {
    @State private var operatorSymbol: String = "+"
    @State private var operand1: String = ""
    @State private var operand2: String = ""
    @State private var result: String = ""
    
    let operators = ["+", "-", "*", "/"]
    
    var body: some View {
        VStack {
            
           
            Text("Калькулятор")
                .font(.largeTitle)
                .fontWeight(.bold)
                .padding()
            
            
                
                TextField("Введіть перший операнд", text: $operand1)
                    .keyboardType(.numberPad)
                    .padding()
            VStack {
                HStack {
                    Button(action: {
                        operatorSymbol = "+"
                    }) {
                        Image(systemName: "plus.circle.fill")
                            .resizable()
                            .frame(width: 40, height: 40)
                            .background(operatorSymbol == "+" ? Color.blue : Color.clear)
                            .clipShape(Circle())
                            .foregroundColor(.black) // Чорний колір символу
                    }
                    
                    Button(action: {
                        operatorSymbol = "-"
                    }) {
                        Image(systemName: "minus.circle.fill")
                            .resizable()
                            .frame(width: 40, height: 40)
                            .background(operatorSymbol == "-" ? Color.blue : Color.clear)
                            .clipShape(Circle())
                            .foregroundColor(.black) // Чорний колір символу
                    }
                    
                    Button(action: {
                        operatorSymbol = "/"
                    }) {
                        Image(systemName: "divide.circle.fill")
                            .resizable()
                            .frame(width: 40, height: 40)
                            .background(operatorSymbol == "/" ? Color.blue : Color.clear)
                            .clipShape(Circle())
                            .foregroundColor(.black) // Чорний колір символу
                    }
                    
                    Button(action: {
                        operatorSymbol = "*"
                    }) {
                        Image(systemName: "multiply.circle.fill")
                            .resizable()
                            .frame(width: 40, height: 40)
                            .background(operatorSymbol == "*" ? Color.blue : Color.clear)
                            .clipShape(Circle())
                            .foregroundColor(.black) // Чорний колір символу
                    }
                }
                TextField("Введіть другий операнд", text: $operand2)
                    .keyboardType(.numberPad)
                    .padding()
                
                Button("Обчислити") {
                    if let resultValue = performCalculation(operatorSymbol: operatorSymbol, operand1: operand1, operand2: operand2) {
                        result = "Результат: \(formatResult(resultValue))"
                    } else {
                        result = "Помилка обчислення"
                    }
                }
                .padding()
                
                Text(result)
                    .padding()
            }
            .padding()
        }
    }
    
    func performCalculation(operatorSymbol: String, operand1: String, operand2: String) -> Double? {
        guard let operand1Value = Double(operand1), let operand2Value = Double(operand2) else {
            return nil // Return nil for invalid operands
        }
        
        switch operatorSymbol {
        case "+":
            return operand1Value + operand2Value
        case "-":
            return operand1Value - operand2Value
        case "*":
            return operand1Value * operand2Value
        case "/":
            guard operand2Value != 0 else {
                return nil
            }
            return operand1Value / operand2Value
        default:
            return nil // Return nil for unknown operators
        }
    }
    
    func formatResult(_ value: Double) -> String {
        if value == floor(value) {
            return String(format: "%.0f", value)
        } else {
            return String(value)
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
